package com.medhead.kf100.web.admin;


import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.medhead.kf100.common.dto.PageEntity;
import com.medhead.kf100.common.dto.ResponseResult;
import com.medhead.kf100.common.util.CommonUtil;
import com.medhead.kf100.common.util.contant.CommonConstants;
import com.medhead.kf100.exception.BusinessException;
import com.medhead.kf100.model.Article;
import com.medhead.kf100.model.ArticleCategory;
import com.medhead.kf100.model.dto.AdminArticleSearchDto;
import com.medhead.kf100.service.ArticleCategoryService;
import com.medhead.kf100.service.ArticleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;

import java.util.Date;
import java.util.List;

/**
 * <p>
 * 前端控制器
 * </p>
 *
 * @author ming
 * @since 2018-11-26
 */
@RestController
@RequestMapping("/api/admin/article")
@ApiIgnore
public class AdminArticleController {

    @Autowired
    private ArticleCategoryService articleCategoryService;

    @Autowired
    private ArticleService articleService;

    @PostMapping("new")
    public ResponseResult newArticle(Article article) {
        article.setStatus(0);
        articleService.insert(article);
        return ResponseResult.success();
    }

    @PostMapping("update")
    public ResponseResult updateArticle(Article article) {
        articleService.updateById(article);
        return ResponseResult.success();
    }

    @PostMapping("delete")
    public ResponseResult deleteArticle(Long id) {
        articleService.deleteById(id);
        return ResponseResult.success();
    }

    @PostMapping("category/list")
    public ResponseResult<List<ArticleCategory>> getArticleCategoryList(Integer level, Long parentId) {
        ArticleCategory articleCategory = new ArticleCategory();
        articleCategory.setLevel(level);
        articleCategory.setParentId(parentId);
        EntityWrapper<ArticleCategory> ew = new EntityWrapper<>(articleCategory);
        return ResponseResult.success(articleCategoryService.selectList(ew));
    }

    @PostMapping("updateStatus")
    public ResponseResult updateStatus(Long id, Integer status) {
        if(id == null){
            throw new BusinessException(CommonConstants.RESPONSE_BAD_REQUEST_CODE, "文章id为空");
        }
        if(status != 0 && status != 1){
            throw new BusinessException(CommonConstants.RESPONSE_BAD_REQUEST_CODE, "文章状态异常参数");
        }
        Article article = new Article();
        article.setId(id);
        article.setStatus(status);
        articleService.updateById(article);
        return ResponseResult.success();
    }

    @PostMapping("list")
    public ResponseResult<PageEntity<Article>> getArticleList(AdminArticleSearchDto dto) {
        if(dto == null) {
            throw new BusinessException(CommonConstants.RESPONSE_BAD_REQUEST_CODE, "参数错误");
        }
        Page<Article> page = new Page<>();
        page.setCurrent(dto.getCurrent());
        page.setSize(dto.getPageSize());
        EntityWrapper<Article> ew = new EntityWrapper<>();
        if(dto.getTopLevelCategoryId() != null) {
            ew.eq("top_level_category_id", dto.getTopLevelCategoryId());
        }
        if(dto.getSecondLevelCategoryId() != null) {
            ew.eq("second_level_category_id", dto.getSecondLevelCategoryId());
        }
        if(dto.getType() != null) {
            ew.eq("type", dto.getType());
        }
        if(dto.getStatus() != null) {
            ew.eq("status", dto.getStatus());
        }
        if(dto.getTitle() != null) {
            ew.like("title", dto.getTitle());
        }
        if(dto.getBegin() != null) {
            ew.ge("create_time", new Date(dto.getBegin()));
        }
        if( dto.getEnd() != null) {
            ew.le("create_time",  new Date(dto.getEnd()));
        }
        ew.orderBy("id",false);
        return ResponseResult.success(CommonUtil.pageToPageEntity(articleService.selectPage(page, ew)));
    }

}

